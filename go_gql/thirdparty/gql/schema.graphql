directive @cacheControl(
	maxAge: Int
	scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE

"""Directs the executor to skip this field or fragment when the `if` argument is true."""
directive @skip(
"""Skipped when true."""
	if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""Directs the executor to include this field or fragment only when the `if` argument is true."""
directive @include(
"""Included when true."""
	if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""Marks an element of a GraphQL schema as no longer supported."""
directive @deprecated(
"""Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax (as specified by [CommonMark](https://commonmark.org/)."""
	reason: String
) on FIELD_DEFINITION | ENUM_VALUE

type Query {
"""Get a specific character by ID"""
	character(
		id: ID!
	): Character
"""Get the list of all characters"""
	characters(
		page: Int
		filter: FilterCharacter
	): Characters
"""Get a list of characters selected by ids"""
	charactersByIds(
		ids: [ID!]!
	): [Character]
"""Get a specific locations by ID"""
	location(
		id: ID!
	): Location
"""Get the list of all locations"""
	locations(
		page: Int
		filter: FilterLocation
	): Locations
"""Get a list of locations selected by ids"""
	locationsByIds(
		ids: [ID!]!
	): [Location]
"""Get a specific episode by ID"""
	episode(
		id: ID!
	): Episode
"""Get the list of all episodes"""
	episodes(
		page: Int
		filter: FilterEpisode
	): Episodes
"""Get a list of episodes selected by ids"""
	episodesByIds(
		ids: [ID!]!
	): [Episode]
}

"""The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID."""
scalar ID

type Character {
"""The id of the character."""
	id: ID
"""The name of the character."""
	name: String
"""The status of the character ('Alive', 'Dead' or 'unknown')."""
	status: String
"""The species of the character."""
	species: String
"""The type or subspecies of the character."""
	type: String
"""The gender of the character ('Female', 'Male', 'Genderless' or 'unknown')."""
	gender: String
"""The character's origin location"""
	origin: Location
"""The character's last known location"""
	location: Location
"""Link to the character's image.
All images are 300x300px and most are medium shots or portraits since they are intended to be used as avatars."""
	image: String
"""Episodes in which this character appeared."""
	episode: [Episode]!
"""Time at which the character was created in the database."""
	created: String
}

"""The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."""
scalar String

type Location {
"""The id of the location."""
	id: ID
"""The name of the location."""
	name: String
"""The type of the location."""
	type: String
"""The dimension in which the location is located."""
	dimension: String
"""List of characters who have been last seen in the location."""
	residents: [Character]!
"""Time at which the location was created in the database."""
	created: String
}

type Episode {
"""The id of the episode."""
	id: ID
"""The name of the episode."""
	name: String
"""The air date of the episode."""
	air_date: String
"""The code of the episode."""
	episode: String
"""List of characters who have been seen in the episode."""
	characters: [Character]!
"""Time at which the episode was created in the database."""
	created: String
}

"""The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."""
scalar Int

input FilterCharacter {
	name: String
	status: String
	species: String
	type: String
	gender: String
}

type Characters {
	info: Info
	results: [Character]
}

type Info {
"""The length of the response."""
	count: Int
"""The amount of pages."""
	pages: Int
"""Number of the next page (if it exists)"""
	next: Int
"""Number of the previous page (if it exists)"""
	prev: Int
}

input FilterLocation {
	name: String
	type: String
	dimension: String
}

type Locations {
	info: Info
	results: [Location]
}

input FilterEpisode {
	name: String
	episode: String
}

type Episodes {
	info: Info
	results: [Episode]
}

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

enum CacheControlScope {
	PUBLIC
	PRIVATE
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

