// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// ListEpisodeEpisodes includes the requested fields of the GraphQL type Episodes.
type ListEpisodeEpisodes struct {
	Info    ListEpisodeEpisodesInfo             `json:"info"`
	Results []ListEpisodeEpisodesResultsEpisode `json:"results"`
}

// GetInfo returns ListEpisodeEpisodes.Info, and is useful for accessing the field via an interface.
func (v *ListEpisodeEpisodes) GetInfo() ListEpisodeEpisodesInfo { return v.Info }

// GetResults returns ListEpisodeEpisodes.Results, and is useful for accessing the field via an interface.
func (v *ListEpisodeEpisodes) GetResults() []ListEpisodeEpisodesResultsEpisode { return v.Results }

// ListEpisodeEpisodesInfo includes the requested fields of the GraphQL type Info.
type ListEpisodeEpisodesInfo struct {
	// The amount of pages.
	Pages int `json:"pages"`
}

// GetPages returns ListEpisodeEpisodesInfo.Pages, and is useful for accessing the field via an interface.
func (v *ListEpisodeEpisodesInfo) GetPages() int { return v.Pages }

// ListEpisodeEpisodesResultsEpisode includes the requested fields of the GraphQL type Episode.
type ListEpisodeEpisodesResultsEpisode struct {
	// The name of the episode.
	Name string `json:"name"`
	// The code of the episode.
	Episode string `json:"episode"`
	// The air date of the episode.
	Air_date string `json:"air_date"`
}

// GetName returns ListEpisodeEpisodesResultsEpisode.Name, and is useful for accessing the field via an interface.
func (v *ListEpisodeEpisodesResultsEpisode) GetName() string { return v.Name }

// GetEpisode returns ListEpisodeEpisodesResultsEpisode.Episode, and is useful for accessing the field via an interface.
func (v *ListEpisodeEpisodesResultsEpisode) GetEpisode() string { return v.Episode }

// GetAir_date returns ListEpisodeEpisodesResultsEpisode.Air_date, and is useful for accessing the field via an interface.
func (v *ListEpisodeEpisodesResultsEpisode) GetAir_date() string { return v.Air_date }

// ListEpisodeResponse is returned by ListEpisode on success.
type ListEpisodeResponse struct {
	// Get the list of all episodes
	Episodes ListEpisodeEpisodes `json:"episodes"`
}

// GetEpisodes returns ListEpisodeResponse.Episodes, and is useful for accessing the field via an interface.
func (v *ListEpisodeResponse) GetEpisodes() ListEpisodeEpisodes { return v.Episodes }

// QueryCharactersCharacters includes the requested fields of the GraphQL type Characters.
type QueryCharactersCharacters struct {
	Info    QueryCharactersCharactersInfo               `json:"info"`
	Results []QueryCharactersCharactersResultsCharacter `json:"results"`
}

// GetInfo returns QueryCharactersCharacters.Info, and is useful for accessing the field via an interface.
func (v *QueryCharactersCharacters) GetInfo() QueryCharactersCharactersInfo { return v.Info }

// GetResults returns QueryCharactersCharacters.Results, and is useful for accessing the field via an interface.
func (v *QueryCharactersCharacters) GetResults() []QueryCharactersCharactersResultsCharacter {
	return v.Results
}

// QueryCharactersCharactersInfo includes the requested fields of the GraphQL type Info.
type QueryCharactersCharactersInfo struct {
	// The length of the response.
	Count int `json:"count"`
}

// GetCount returns QueryCharactersCharactersInfo.Count, and is useful for accessing the field via an interface.
func (v *QueryCharactersCharactersInfo) GetCount() int { return v.Count }

// QueryCharactersCharactersResultsCharacter includes the requested fields of the GraphQL type Character.
type QueryCharactersCharactersResultsCharacter struct {
	// The name of the character.
	Name string `json:"name"`
}

// GetName returns QueryCharactersCharactersResultsCharacter.Name, and is useful for accessing the field via an interface.
func (v *QueryCharactersCharactersResultsCharacter) GetName() string { return v.Name }

// QueryCharactersResponse is returned by QueryCharacters on success.
type QueryCharactersResponse struct {
	// Get the list of all characters
	Characters QueryCharactersCharacters `json:"characters"`
}

// GetCharacters returns QueryCharactersResponse.Characters, and is useful for accessing the field via an interface.
func (v *QueryCharactersResponse) GetCharacters() QueryCharactersCharacters { return v.Characters }

// The query or mutation executed by ListEpisode.
const ListEpisode_Operation = `
query ListEpisode {
	episodes(page: 1) {
		info {
			pages
		}
		results {
			name
			episode
			air_date
		}
	}
}
`

func ListEpisode(
	ctx_ context.Context,
	client_ graphql.Client,
) (*ListEpisodeResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListEpisode",
		Query:  ListEpisode_Operation,
	}
	var err_ error

	var data_ ListEpisodeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryCharacters.
const QueryCharacters_Operation = `
query QueryCharacters {
	characters(page: 2, filter: {name:"rick"}) {
		info {
			count
		}
		results {
			name
		}
	}
}
`

func QueryCharacters(
	ctx_ context.Context,
	client_ graphql.Client,
) (*QueryCharactersResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryCharacters",
		Query:  QueryCharacters_Operation,
	}
	var err_ error

	var data_ QueryCharactersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
